# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2022-2024 Dell Inc, or its subsidiaries.

---
# tasks file for bmc_fw_update

- name: Validate server authentication input provided by user
  ansible.builtin.fail:
    msg: "{{ bmc_fw_update_mandatory_msg }}"
  when:
    - (dpu_bmc_username is not defined or dpu_bmc_password is not defined) and (dpu_bmc_token is not defined)

- name: Fail when more than one valid authentication method is provided
  ansible.builtin.fail:
    msg: "{{ bmc_fw_update_mutual_exclusive_msg }}"
  when:
    - (dpu_bmc_username is defined or dpu_bmc_password is defined) and (dpu_bmc_token is defined)

- name: Get Firmware Inventory
  ansible.builtin.include_role:
    name: get_bmc_facts
  register: get_bmc_facts_before

- name: Store current fw version
  ansible.builtin.set_fact:
    bmc_fw_update_cur_fw_version: "{{ get_bmc_facts_before.get_bmc_facts_all_fw_versions[bmc_fw_update_inventory_name] }}"

- name: Print BMC Version
  ansible.builtin.debug:
    msg: "{{ get_bmc_facts_before.get_bmc_facts_all_fw_versions }}"

- name: Check if firmware image exists locally {{ bmc_fw_update_image_file }}
  ansible.builtin.stat:
    path: "{{ bmc_fw_update_image_file }}"
  delegate_to: "{{ bmc_fw_update_delegate }}"
  register: bmc_fw_update_local_file_check

- name: Download firmware image {{ bmc_fw_update_image_url }}
  ansible.builtin.get_url:
    url: "{{ bmc_fw_update_image_url }}"
    dest: "{{ bmc_fw_update_image_file }}"
    mode: '0440'
  delegate_to: "{{ bmc_fw_update_delegate }}"
  when: not bmc_fw_update_local_file_check.stat.exists

- name: Check multipart support
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}/redfish/v1/UpdateService"
    method: GET
    return_content: true
    status_code: 200
    body_format: json
    url_username: "{{ dpu_bmc_username | default(omit) }}"
    url_password: "{{ dpu_bmc_password | default(omit) }}"
    headers:
      X-Auth-Token: "{{ dpu_bmc_token | default(omit) }}"
    force_basic_auth: true
    validate_certs: false
  delegate_to: "{{ bmc_fw_update_delegate }}"
  register: bmc_fw_update_multipart_check

- name: Update BMC firmware of DPU using deprecated HttpPushUri
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}{{ bmc_fw_update_multipart_check.json.HttpPushUri }}"
    method: POST
    status_code: [200, 202]
    src: "{{ bmc_fw_update_image_file }}"
    headers:
      Content-Type: application/octet-stream
      X-Auth-Token: "{{ dpu_bmc_token | default(omit) }}"
    url_username: "{{ dpu_bmc_username | default(omit) }}"
    url_password: "{{ dpu_bmc_password | default(omit) }}"
    force_basic_auth: true
    validate_certs: false
  delegate_to: "{{ bmc_fw_update_delegate }}"
  register: bmc_fw_update_deprecated_http_push
  when: bmc_fw_update_multipart_check.json.MultipartHttpPushUri is not defined

- name: Extract task id from update task
  ansible.builtin.set_fact:
    bmc_firmware_update_taskid: '{{ bmc_fw_update_deprecated_http_push.location | urlsplit("path") }}'
  when: bmc_fw_update_multipart_check.json.MultipartHttpPushUri is not defined

- name: Update BMC firmware of DPU
  community.general.redfish_command:
    category: Update
    command: MultipartHTTPPushUpdate
    baseuri: "{{ inventory_hostname }}"
    auth_token: "{{ dpu_bmc_token | default(omit) }}"
    username: "{{ dpu_bmc_username | default(omit) }}"
    password: "{{ dpu_bmc_password | default(omit) }}"
    timeout: 600
    update_image_file: "{{ bmc_fw_update_image_file }}"
  register: result_update_task
  delegate_to: "{{ bmc_fw_update_delegate }}"
  when: bmc_fw_update_multipart_check.json.MultipartHttpPushUri is defined

- name: Extract task id from update task
  ansible.builtin.set_fact:
    bmc_firmware_update_taskid: "{{ result_update_task.return_values.update_status.handle }}"
  when: bmc_fw_update_multipart_check.json.MultipartHttpPushUri is defined

- name: Print TASK id for tracking
  ansible.builtin.debug:
    msg: "{{ bmc_firmware_update_taskid }}"

- name: Pause for 10 seconds for BMC to start task
  ansible.builtin.pause:
    seconds: 10

- name: Get the status of an update operation in a loop
  community.general.redfish_info:
    category: Update
    command: GetUpdateStatus
    baseuri: "{{ inventory_hostname }}"
    auth_token: "{{ dpu_bmc_token | default(omit) }}"
    username: "{{ dpu_bmc_username | default(omit) }}"
    password: "{{ dpu_bmc_password | default(omit) }}"
    update_handle: "{{ bmc_firmware_update_taskid }}"
  register: update_progress
  until: update_progress.redfish_facts.update_status.status != 'Running'
  retries: 60
  delay: 30
  delegate_to: "{{ bmc_fw_update_delegate }}"
  when: bmc_fw_update_job_wait is true

- name: Validate task was completed
  ansible.builtin.fail:
    msg: "{{ bmc_fw_update_task_failure | format(update_progress.redfish_facts.update_status.status) }}"
  when:
    - bmc_fw_update_job_wait is true
    - update_progress.redfish_facts.update_status.status != 'Completed'

- name: Reboot BMC to apply new firmware of DPU
  ansible.builtin.include_role:
    name: bmc_reboot
  when: bmc_fw_update_reboot is true

- name: Get Firmware Inventory
  ansible.builtin.include_role:
    name: get_bmc_facts
  register: get_bmc_facts_after

- name: Print BMC Version
  ansible.builtin.debug:
    msg: "{{ get_bmc_facts_after.get_bmc_facts_all_fw_versions }}"

- name: Store fw version we installed
  ansible.builtin.set_fact:
    bmc_fw_update_got_fw_version: "{{ get_bmc_facts_after.get_bmc_facts_all_fw_versions[bmc_fw_update_inventory_name] }}"

- name: Validate fw image matches given filename
  ansible.builtin.fail:
    msg: "{{ bmc_fw_update_version_failure }}"
  when:
    - bmc_fw_update_reboot is true
    - not (bmc_fw_update_image_file is search(bmc_fw_update_got_fw_version | regex_search('[0-9-.]+')))

